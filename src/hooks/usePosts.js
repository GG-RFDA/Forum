import {useMemo} from "react";
// Создаём первый хук (это будет некоторая функция, которая параметрами принимает посты и метод сортировки)
export const useSortedPosts = (posts, sort) => {
    /*
     * Используем хук useMemo.
     * Параметрами передаём функцию callback и массив зависимостей.
     * Функция должна возвращать результат вычислений.
     * Callback будет вызван только в том случае, если какая-то из зависимостей в массиве поменяет своё значение.
     */
    const sortedPosts = useMemo(() => {
        // Если строка не пустая, то возвращаем отсортированный массив
        if(sort) {
            /*
             * Разворачиваем посты в новый массив и отсортировываем его.
             * В данном случае мутируем копию массива и не мутируем состояние напрямую.
             * Вызываем функцию sort, принимающую callback, принимающий аргументами 2 элемента массива.
             * Выцепляем поле, выбранное пользователем (title или body).
             * Для сравнения строк используем функцию localeCompare.
             */
            return [...posts].sort((a, b) => a[sort].localeCompare(b[sort]))
        }
        // В обратном случае возвращаем обычный массив постов
        return posts;
    }, [sort, posts])
    // Хук возвращает отсортированный массив
    return sortedPosts;
}
/*
 * Создаём второй хук, возвращающий и отфильтрованный, и отсортированный массив.
 * Аргументами принимает посты, метод сортировки и поисковую строку.
 */
export const usePosts = (posts, sort, query) => {
    const sortedPosts = useSortedPosts(posts, sort);
    // В массив зависимостей будет попадать поисковая строка и отсортированный массив
    const sortedAndSearchedPosts = useMemo(() => {
        /*
         * По поисковой строке отфильтровываем массив.
         * Передаём внутрь фильтра callback.
         * Затем обращаемся к названию поста.
         * Поскольку поиск чувствителен к регистру, то вызываем функцию toLowerCase.
         * Вызываем функцию includes и передаём поисковую строку.
         * В массиве останутся только те посты, названия которых содержат нужный поисковый запрос.
         */
        return sortedPosts.filter(post => post.title.toLowerCase().includes(query.toLowerCase()))
    }, [query, sortedPosts])
    // Возвращаем и отфильтрованный, и отсортированный массив.
    return sortedAndSearchedPosts;
}